{"ast":null,"code":"var _jsxFileName = \"D:\\\\React_Database\\\\src\\\\App.js\";\nimport React, { useState } from \"react\";\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\n\nfunction App() {\n  const [movies, setMovies] = useState([]); // mannual approch to fetch data by creating arrrat\n  // const dummyMovies = [\n  //   {\n  //  id: 1,\n  // title: 'Some Dummy Movie',\n  //   openingText: 'This is the opening text of the movie',\n  //  releaseDate: '2021-05-18',\n  // },\n  // {\n  //  id: 2,\n  //  title: 'Some Dummy Movie 2',\n  //  openingText: 'This is the second opening text of the movie',\n  //  releaseDate: '2021-05-19',\n  // },\n  // ];\n\n  const [isLoading, setisLoading] = useState(false); // to handle error\n\n  const [error, setError] = useState(null); // using fetch method to get data from swapi to shwoing the list\n\n  async function fetchMovieHandler() {\n    setisLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(\"https://swapi.dev/api/films\");\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(' Something went wrong');\n      }\n\n      const transformedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date\n        };\n      });\n      setMovies(transformedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setisLoading(false);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMovieHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, !isLoading && movies.length > 0 && /*#__PURE__*/React.createElement(MoviesList, {\n    movies: movies,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 45\n    }\n  }), !isLoading && movies.length === 0 && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 47\n    }\n  }, \" Found no movies\"), !isLoading && error && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 33\n    }\n  }, error), isLoading && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 23\n    }\n  }, \" Loading...\")));\n}\n\nexport default App;","map":{"version":3,"names":["React","useState","MoviesList","App","movies","setMovies","isLoading","setisLoading","error","setError","fetchMovieHandler","response","fetch","data","json","ok","Error","transformedMovies","results","map","movieData","id","episode_id","title","openingText","opening_crawl","releaseDate","release_date","message","length"],"sources":["D:/React_Database/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n\n  // mannual approch to fetch data by creating arrrat\n  // const dummyMovies = [\n  //   {\n  //  id: 1,\n  // title: 'Some Dummy Movie',\n  //   openingText: 'This is the opening text of the movie',\n  //  releaseDate: '2021-05-18',\n  // },\n  // {\n  //  id: 2,\n  //  title: 'Some Dummy Movie 2',\n  //  openingText: 'This is the second opening text of the movie',\n  //  releaseDate: '2021-05-19',\n  // },\n  // ];\n\n  const [isLoading, setisLoading] = useState(false);\n\n  // to handle error\n\n  const [error, setError] = useState(null);\n\n  // using fetch method to get data from swapi to shwoing the list\n\n  async function fetchMovieHandler() {\n    setisLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(\"https://swapi.dev/api/films\");\n      const data = await response.json();\n        \n      if(!response.ok){\n        throw new Error(' Something went wrong');\n      }\n\n      const transformedMovies = data.results.map((movieData) => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date,\n        };\n      });\n      setMovies(transformedMovies);\n      \n    } catch (error) {\n      setError(error.message);\n    }\n    setisLoading(false);\n  }\n\n  return (\n    <React.Fragment>\n      <section>\n        <button onClick={fetchMovieHandler}>Fetch Movies</button>\n      </section>\n      <section>\n        {!isLoading && movies.length > 0 && <MoviesList movies={movies} />}\n        {!isLoading && movies.length === 0 && <p> Found no movies</p>}\n        {!isLoading && error && <p>{error}</p>}\n        {isLoading && <p> Loading...</p>}\n\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAO,WAAP;;AAEA,SAASC,GAAT,GAAe;EACb,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBJ,QAAQ,CAAC,EAAD,CAApC,CADa,CAGb;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C,CAnBa,CAqBb;;EAEA,MAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,IAAD,CAAlC,CAvBa,CAyBb;;EAEA,eAAeS,iBAAf,GAAmC;IACjCH,YAAY,CAAC,IAAD,CAAZ;IACAE,QAAQ,CAAC,IAAD,CAAR;;IAEA,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAAD,CAA5B;MACA,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;;MAEA,IAAG,CAACH,QAAQ,CAACI,EAAb,EAAgB;QACd,MAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;MACD;;MAED,MAAMC,iBAAiB,GAAGJ,IAAI,CAACK,OAAL,CAAaC,GAAb,CAAkBC,SAAD,IAAe;QACxD,OAAO;UACLC,EAAE,EAAED,SAAS,CAACE,UADT;UAELC,KAAK,EAAEH,SAAS,CAACG,KAFZ;UAGLC,WAAW,EAAEJ,SAAS,CAACK,aAHlB;UAILC,WAAW,EAAEN,SAAS,CAACO;QAJlB,CAAP;MAMD,CAPyB,CAA1B;MAQAtB,SAAS,CAACY,iBAAD,CAAT;IAED,CAlBD,CAkBE,OAAOT,KAAP,EAAc;MACdC,QAAQ,CAACD,KAAK,CAACoB,OAAP,CAAR;IACD;;IACDrB,YAAY,CAAC,KAAD,CAAZ;EACD;;EAED,oBACE,oBAAC,KAAD,CAAO,QAAP;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE;IAAQ,OAAO,EAAEG,iBAAjB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,kBADF,CADF,eAIE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACG,CAACJ,SAAD,IAAcF,MAAM,CAACyB,MAAP,GAAgB,CAA9B,iBAAmC,oBAAC,UAAD;IAAY,MAAM,EAAEzB,MAApB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EADtC,EAEG,CAACE,SAAD,IAAcF,MAAM,CAACyB,MAAP,KAAkB,CAAhC,iBAAqC;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,sBAFxC,EAGG,CAACvB,SAAD,IAAcE,KAAd,iBAAuB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAIA,KAAJ,CAH1B,EAIGF,SAAS,iBAAI;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,iBAJhB,CAJF,CADF;AAcD;;AAED,eAAeH,GAAf"},"metadata":{},"sourceType":"module"}